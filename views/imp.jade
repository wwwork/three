html(lang='en', ng-app='myBlogApp')
    head
        title=title
        meta(charset='utf8')
        base(href='/')
        if (title)
               meta(name='description', content=title)
           else
               meta(name='description', content='My NODE.js BLOG')
        script(src='/public/js/jquery-2.2.4.js')
        script(src='/public/js/bootstrap.min.js')
        script(src='/public/js/three.js')
        script(src='/public/js/OrbitControls.js')
        script(src='/public/js/dat.gui.js')

  body
    .container
        script.
                var renderer, scene, camera, cameraPosition, cameraX, cameraY, cameraZ;
                var renderer = new THREE.WebGLRenderer();
                var scene = new THREE.Scene();
                var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );
                var loader = new THREE.TextureLoader();
                // init camera position
                var cameraX = 90;
                var cameraY = 75; 
                var cameraZ = 250;  
                
                var controls = function () {
                    this.exportScene = function () {
                        var exporter = new THREE.SceneExporter();
                        var sceneJson = JSON.stringify(exporter.parse(scene));
                        localStorage.setItem('scene', sceneJson);
                    };
                    this.clearScene = function () {
                        scene = new THREE.Scene();
                    };
                    this.importScene = function () {
                        var json = (localStorage.getItem('scene'));
                        var sceneLoader = new THREE.SceneLoader();
                        sceneLoader.parse(JSON.parse(json), function (e) {
                        scene = e.scene;
                    }, '.');
                    }
                };
                var gui = new dat.GUI();
                gui.add(controls, "exportScene");
                gui.add(controls, "clearScene");
                gui.add(controls, "importScene");
        
                var init = function (){
                renderer.setSize( window.innerWidth, window.innerHeight );
                renderer.shadowMapEnabled = true;
                document.body.appendChild( renderer.domElement );
                var orbit = new THREE.OrbitControls( camera, renderer.domElement );
                orbit.enableZoom = false;
                var length = 3, width = 50;
                var shape = new THREE.Shape();
                shape.moveTo( 0,0 );
                shape.lineTo( 0, width );
                shape.lineTo( length, width );
                shape.lineTo( length, 0 );
                shape.lineTo( 0, 0 );

                var extrudeSettings = {
                steps: 1,
                amount: 90,
                bevelEnabled: false,
                bevelThickness: 1,
                bevelSize: 1,
                bevelSegments: 1
                };
                
                var axes = new THREE.AxisHelper( 20 );
                scene.add(axes);
                var planeGeometry = new THREE.PlaneGeometry(160,220);
                var planeMaterial = new THREE.MeshLambertMaterial({color: 0xcccccc, map: THREE.ImageUtils.loadTexture("/public/images/bricks.jpg")});
                var plane = new THREE.Mesh(planeGeometry,planeMaterial);
                plane.rotation.x = -0.5*Math.PI;
                plane.position.x = 15;
                plane.position.y = 0;
                plane.position.z = 0;
                plane.receiveShadow = true;
                scene.add(plane);
                var geometry = new THREE.ExtrudeGeometry( shape, extrudeSettings );
                var material = new THREE.MeshLambertMaterial( { color: 0xff6600, transparent:true, opacity:0.6 } );
                var mesh = new THREE.Mesh( geometry, material ) ;
                mesh.rotation.y += 0.02;
                mesh.castShadow = true;
                scene.add( mesh );
                //Iwanaseezelight                 
                var spotLight = new THREE.SpotLight( 0xffffff );
                spotLight.position.set( 120, 120, 100 );
                spotLight.castShadow = true;
                
                scene.add(spotLight );
                camera.lookAt(new THREE.Vector3(0, 0, 0));
                camera.position.set(cameraX, cameraY, cameraZ);
                } // end init
                
                var render = function () {
                        renderer.render(scene, camera);
                };
                
                function animate() 
                {
                    requestAnimationFrame( animate );
                    render();
                }
                    
                $( "body" ).mouseup(function() {
                    // objcoord
                        $.post( "/api/put_coord", { "x": camera.position.x, "y": camera.position.y, "z":camera.position.z })
                            .done(function( data ) {
                                 console.log( "Data to SERVER posted and recieved : " + data );
                        });
                         console.log('cameraPOS --> '+camera.position.x);
                    });
                $( document ).ready( function() {
                                    $.get("/api/get_coord")
                                     .done(function(data) {
                                     // if load last camera position 
                                         if ( data != "404"){
                                             console.log("START Data Loaded camera XYZ: " + data.x + " "+data.y + " " +data.y );
                                             cameraX = data.x;
                                             cameraY = data.y; 
                                             cameraZ = data.z;    
                                         }
                                         init();
                                         animate();
                                     })
                                    .fail(function() {
                                    //console.log("if fail, initiate scene and render, init with def. coord: "+cameraX+" "+cameraY+" "+cameraZ);
                                    // if fail, initiate scene and render
                                            init();
                                            animate();

                                    })
                                  });
                
                

   